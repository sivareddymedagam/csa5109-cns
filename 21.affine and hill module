def apply_permutation(input_text, permutation):
    return ''.join(input_text[i] for i in permutation)

def initial_permutation(input_text, permutation):
    return apply_permutation(input_text, permutation)

def final_permutation(input_text, permutation):
    return apply_permutation(input_text, permutation)

def expand_key(key, expansion_permutation):
    return apply_permutation(key, expansion_permutation)

def xor_binary_strings(a, b):
    return ''.join('1' if x != y else '0' for x, y in zip(a, b))

def apply_s_box(input_text, s_box):
    row = int(input_text[0] + input_text[3], 2)
    col = int(input_text[1:3], 2)
    return format(s_box[row][col], '02b')

def feistel_function(right_half, subkey, s_box):
    expanded_right = expand_key(right_half, [3, 0, 1, 2, 1, 2, 3, 0])
    xor_result = xor_binary_strings(expanded_right, subkey)
    
    s_box_output = ''.join(apply_s_box(xor_result[i:i+4], s_box[i]) for i in range(0, len(xor_result), 4))
    permuted_output = apply_permutation(s_box_output, [1, 3, 2, 0])
    
    return xor_binary_strings(left_half, permuted_output)

def generate_subkeys(key):
    key_permutation_1 = [2, 4, 1, 6, 3, 9, 0, 8, 7, 5]
    key_permutation_2 = [5, 2, 6, 3, 7, 4, 9, 8]

    # Initial permutation
    permuted_key = apply_permutation(key, key_permutation_1)

    # Split the key into two halves
    left_half = permuted_key[:len(permuted_key)//2]
    right_half = permuted_key[len(permuted_key)//2:]

    # Circular left shift for each half
    left_half = left_half[1:] + left_half[0]
    right_half = right_half[1:] + right_half[0]

    # Combine and apply the second permutation
    combined_halves = left_half + right_half
    subkey_1 = apply_permutation(combined_halves, key_permutation_2)

    # Perform another circular left shift for each half
    left_half = left_half[2:] + left_half[:2]
    right_half = right_half[2:] + right_half[:2]

    # Combine and apply the second permutation again
    combined_halves = left_half + right_half
    subkey_2 = apply_permutation(combined_halves, key_permutation_2)

    return subkey_1, subkey_2

def encrypt_block(plaintext_block, key, iv, s_box):
    subkey_1, subkey_2 = generate_subkeys(key)
    xor_result = xor_binary_strings(plaintext_block, iv)
    
    # Initial permutation
    permuted_text = initial_permutation(xor_result, [1, 5, 2, 0, 3, 7, 4, 6])

    # Split into left and right halves
    left_half = permuted_text[:len(permuted_text)//2]
    right_half = permuted_text[len(permuted_text)//2:]

    # Apply Feistel Network
    feistel_output = feistel_function(right_half, subkey_1, s_box)
    xor_result = xor_binary_strings(left_half, feistel_output)

    # Swap left and right halves
    left_half, right_half = right_half, xor_result

    # Apply second round of Feistel Network
    feistel_output = feistel_function(right_half, subkey_2, s_box)
    xor_result = xor_binary_strings(left_half, feistel_output)

    # Final permutation
    ciphertext_block = final_permutation(xor_result, [4, 0, 6, 1, 7, 3, 5, 2])

    return ciphertext_block

def decrypt_block(ciphertext_block, key, iv, s_box):
    subkey_1, subkey_2 = generate_subkeys(key)

    # Initial permutation
    permuted_text = initial_permutation(ciphertext_block, [4, 0, 6, 1, 7, 3, 5, 2])

    # Split into left and right halves
    left_half = permuted_text[:len(permuted_text)//2]
    right_half = permuted_text[len(permuted_text)//2:]

    # Apply Feistel Network (reverse order of subkeys)
    feistel_output = feistel_function(right_half, subkey_2, s_box)
    xor_result = xor_binary_strings(left_half, feistel_output)

    # Swap left and right halves
    left_half, right_half = right_half, xor_result

    # Apply second round of Feistel Network (reverse order of subkeys)
    feistel_output = feistel_function(right_half, subkey_1, s_box)
    xor_result = xor_binary_strings(left_half, feistel_output)

    # Final permutation
    plaintext_block = final_permutation(xor_result, [1, 5, 2, 0, 3, 7, 4, 6])

    # XOR with IV
    decrypted_block = xor_binary_strings(plaintext_block, iv)

    return decrypted_block

def binary_to_hex(binary_string):
    return hex(int(binary_string, 2))[2:]

def hex_to_binary(hex_string):
    return bin(int(hex_string, 16))[2:].zfill(len(hex_string)*4)

# Test data
key = "0111111101"
plaintext = "0000000100100011"
iv = "10101010"
expected_ciphertext = "111101000001011"

# Convert inputs to binary
key_binary = key
plaintext_binary = plaintext
iv_binary = iv
expected_ciphertext_binary = expected_ciphertext

# Encrypt
ciphertext_block = encrypt_block(plaintext_binary, key_binary, iv_binary, s_box)
ciphertext_hex = binary_to_hex(ciphertext_block)

# Decrypt
decrypted_block = decrypt_block(ciphertext_block, key_binary, iv_binary, s_box)
decrypted_hex = binary_to_hex(decrypted_block)

# Display results
print("Original Plaintext (Binary):", plaintext_binary)
print("Key (Binary):", key_binary)
print("IV (Binary):", iv_binary)
print("Expected Ciphertext (Binary):", expected_ciphertext_binary)

print("\nEncryption:")
print("Ciphertext (Binary):", ciphertext_block)
print("Ciphertext (Hex):", ciphertext_hex)

print("\nDecryption:")
print("Decrypted Plaintext (Binary):", decrypted_block)
print("Decrypted Plaintext (Hex):", decrypted_hex)

# Check if the result matches the expected ciphertext
if ciphertext_block == expected_ciphertext_binary:
    print("\nEncryption test passed.")
else:
    print("\nEncryption test failed.")

# Check if the decrypted result matches the original plaintext
if decrypted_block == plaintext_binary:
    print("Decryption test passed.")
else:
    print("Decryption test failed.")
