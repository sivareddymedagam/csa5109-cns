from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad

def encrypt_ecb(plaintext, key):
    cipher = AES.new(key, AES.MODE_ECB)
    ciphertext = cipher.encrypt(pad(plaintext.encode('utf-8'), AES.block_size))
    return ciphertext

def decrypt_ecb(ciphertext, key):
    cipher = AES.new(key, AES.MODE_ECB)
    plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)
    return plaintext.decode('utf-8')

def encrypt_cbc(plaintext, key, iv):
    cipher = AES.new(key, AES.MODE_CBC, iv)
    ciphertext = cipher.encrypt(pad(plaintext.encode('utf-8'), AES.block_size))
    return ciphertext

def decrypt_cbc(ciphertext, key, iv):
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)
    return plaintext.decode('utf-8')

def introduce_error(ciphertext, block_number, bit_position):
    # Introduce an error at the specified bit position in the specified block
    byte_position = block_number * AES.block_size + bit_position // 8
    byte_mask = 1 << (bit_position % 8)
    modified_byte = ciphertext[byte_position] ^ byte_mask
    modified_ciphertext = ciphertext[:byte_position] + bytes([modified_byte]) + ciphertext[byte_position + 1:]
    return modified_ciphertext

# Key and Initialization Vector (IV) generation
key = get_random_bytes(16)
iv = get_random_bytes(16)

# Example plaintext
plaintext = "This is a test message for ECB and CBC modes."

# Encrypt in ECB mode
ciphertext_ecb = encrypt_ecb(plaintext, key)

# Introduce an error in the second block (assuming AES block size is 16 bytes)
modified_ciphertext_ecb = introduce_error(ciphertext_ecb, 1, 5)

# Decrypt in ECB mode
decrypted_text_ecb = decrypt_ecb(modified_ciphertext_ecb, key)

# Encrypt in CBC mode
ciphertext_cbc = encrypt_cbc(plaintext, key, iv)

# Introduce an error in the second block (assuming AES block size is 16 bytes)
modified_ciphertext_cbc = introduce_error(ciphertext_cbc, 1, 5)

# Decrypt in CBC mode
decrypted_text_cbc = decrypt_cbc(modified_ciphertext_cbc, key, iv)

# Display results
print("Original Plaintext:", plaintext)
print("\nECB Mode:")
print("Original Ciphertext:", ciphertext_ecb.hex())
print("Modified Ciphertext:", modified_ciphertext_ecb.hex())
print("Decrypted Text:", decrypted_text_ecb)

print("\nCBC Mode:")
print("Original Ciphertext:", ciphertext_cbc.hex())
print("Modified Ciphertext:", modified_ciphertext_cbc.hex())
print("Decrypted Text:", decrypted_text_cbc)
